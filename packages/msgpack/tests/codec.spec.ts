import { test } from 'uvu';
import * as assert from 'uvu/assert';

import { encode, decode } from '../src';

test('positive fixint', () => {
  assert.equal(encode(1), new Uint8Array([0x01]));
  assert.equal(encode(127), new Uint8Array([0x7F]));

  assert.equal(decode(new Uint8Array([0x01])), 1);
  assert.equal(decode(new Uint8Array([0x7F])), 127);
});

test('uint8', () => {
  assert.equal(encode(128), new Uint8Array([0xCC, 0x80]));
  assert.equal(encode(255), new Uint8Array([0xCC, 0xFF]));

  assert.equal(decode(new Uint8Array([0xCC, 0x80])), 128);
  assert.equal(decode(new Uint8Array([0xCC, 0xFF])), 255);
});

test('uint16', () => {  
  assert.equal(encode(256), new Uint8Array([0xCD, 0x01, 0x00]));
  assert.equal(encode(65535), new Uint8Array([0xCD, 0xFF, 0xFF]));

  assert.equal(decode(new Uint8Array([0xCD, 0x01, 0x00])), 256);
  assert.equal(decode(new Uint8Array([0xCD, 0xFF, 0xFF])), 65535);
});

test('uint32', () => {
  assert.equal(encode(65536), new Uint8Array([0xCE, 0x00, 0x01, 0x00, 0x00]));
  assert.equal(encode(4294967295), new Uint8Array([0xCE, 0xFF, 0xFF, 0xFF, 0xFF]));

  assert.equal(decode(new Uint8Array([0xCE, 0x00, 0x01, 0x00, 0x00])), 65536);
  assert.equal(decode(new Uint8Array([0xCE, 0xFF, 0xFF, 0xFF, 0xFF])), 4294967295);
});

test('uint64', () => {
  assert.equal(encode(4294967296), new Uint8Array([0xCF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00]));
  assert.equal(encode(9007199254740991), new Uint8Array([0xCF, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]));

  assert.equal(decode(new Uint8Array([0xCF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00])), 4294967296);
  assert.equal(decode(new Uint8Array([0xCF, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])), 9007199254740991);
});


test('boolean', () => {
  assert.equal(encode(true), new Uint8Array([0xC3]));
  assert.equal(encode(false), new Uint8Array([0xC2]));

  assert.equal(decode(new Uint8Array([0xC3])), true);
  assert.equal(decode(new Uint8Array([0xC2])), false);
});

test('nil', () => {
  assert.equal(encode(null), new Uint8Array([0xC0]));
  assert.equal(decode(new Uint8Array([0xC0])), null);
});

test('negative fixint', () => {
  assert.equal(encode(-1), new Uint8Array([0xFF]));
  assert.equal(encode(-32), new Uint8Array([0xE0]));

  assert.equal(decode(new Uint8Array([0xFF])), -1);
  assert.equal(decode(new Uint8Array([0xE0])), -32);
});

test('int8', () => {
  assert.equal(encode(-33), new Uint8Array([0xD0, 0xDF]));
  assert.equal(encode(-128), new Uint8Array([0xD0, 0x80]));

  assert.equal(decode(new Uint8Array([0xD0, 0xDF])), -33);
  assert.equal(decode(new Uint8Array([0xD0, 0x80])), -128);
});

test('int16', () => {
  assert.equal(encode(-129), new Uint8Array([0xD1, 0xFF, 0x7F]));
  assert.equal(encode(-32768), new Uint8Array([0xD1, 0x80, 0x00]));

  assert.equal(decode(new Uint8Array([0xD1, 0xFF, 0x7F])), -129);
  assert.equal(decode(new Uint8Array([0xD1, 0x80, 0x00])), -32768);
});

test('int32', () => {
  assert.equal(encode(-32769), new Uint8Array([0xD2, 0xFF, 0xFF, 0x7F, 0xFF]));
  assert.equal(encode(-214748364), new Uint8Array([0xD2, 0xF3, 0x33, 0x33, 0x34]));

  assert.equal(decode(new Uint8Array([0xD2, 0xFF, 0xFF, 0x7F, 0xFF])), -32769);
  assert.equal(decode(new Uint8Array([0xD2, 0xF3, 0x33, 0x33, 0x34])), -214748364);
});

test('int64', () => {
  assert.equal(encode(-214748365), new Uint8Array([0xD3, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0x33, 0x33, 0x33]));
  assert.equal(encode(-9007199254740991), new Uint8Array([0xD3, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]));

  assert.equal(decode(new Uint8Array([0xD3, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0x33, 0x33, 0x33])), -214748365);
  assert.equal(decode(new Uint8Array([0xD3, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01])), -9007199254740991);
});

test('fixstr', () => {
  assert.equal(encode(""), new Uint8Array([0xA0]));
  assert.equal(encode("1a"), new Uint8Array([0xA2, 0x31, 0x61]));
  assert.equal(encode("1234567890123456789012345678901"), new Uint8Array([
    0xBF,
    0x31,
    0x32,
    0x33,
    0x34,
    0x35,
    0x36,
    0x37,
    0x38,
    0x39,
    0x30,
    0x31,
    0x32,
    0x33,
    0x34,
    0x35,
    0x36,
    0x37,
    0x38,
    0x39,
    0x30,
    0x31,
    0x32,
    0x33,
    0x34,
    0x35,
    0x36,
    0x37,
    0x38,
    0x39,
    0x30,
    0x31
  ]));

  assert.equal(decode(new Uint8Array([0xA0])), "");
  assert.equal(decode(new Uint8Array([0xA2, 0x31, 0x61])), "1a");
  assert.equal(decode(new Uint8Array([
    0xBF,
    0x31,
    0x32,
    0x33,
    0x34,
    0x35,
    0x36,
    0x37,
    0x38,
    0x39,
    0x30,
    0x31,
    0x32,
    0x33,
    0x34,
    0x35,
    0x36,
    0x37,
    0x38,
    0x39,
    0x30,
    0x31,
    0x32,
    0x33,
    0x34,
    0x35,
    0x36,
    0x37,
    0x38,
    0x39,
    0x30,
    0x31
  ])), "1234567890123456789012345678901");
});

test('str8', () => {
  assert.equal(encode("12345678901234567890123456789012"), new Uint8Array([
    0xD9,
    0x20,
    0x31,
    0x32,
    0x33,
    0x34,
    0x35,
    0x36,
    0x37,
    0x38,
    0x39,
    0x30,
    0x31,
    0x32,
    0x33,
    0x34,
    0x35,
    0x36,
    0x37,
    0x38,
    0x39,
    0x30,
    0x31,
    0x32,
    0x33,
    0x34,
    0x35,
    0x36,
    0x37,
    0x38,
    0x39,
    0x30,
    0x31,
    0x32
  ]));
  assert.equal(encode("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345"),
  new Uint8Array([
    0xd9,0xff,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35
  ]));

  assert.equal(decode(new Uint8Array([
    0xD9,
    0x20,
    0x31,
    0x32,
    0x33,
    0x34,
    0x35,
    0x36,
    0x37,
    0x38,
    0x39,
    0x30,
    0x31,
    0x32,
    0x33,
    0x34,
    0x35,
    0x36,
    0x37,
    0x38,
    0x39,
    0x30,
    0x31,
    0x32,
    0x33,
    0x34,
    0x35,
    0x36,
    0x37,
    0x38,
    0x39,
    0x30,
    0x31,
    0x32
  ])), "12345678901234567890123456789012");

  assert.equal(decode(new Uint8Array([
    0xd9,0xff,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35
  ])),
  "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345"
  );
});

test('str16', () => {
  assert.equal(encode("1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456"),
  new Uint8Array([
    0xda,0x01,0x00,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36
  ]));

  assert.equal(encode(new Array(65535).fill(0).map( (_, idx) => (idx % 10).toString()).join("")), new Uint8Array([
    0xda, 0xff, 0xff, ...new Array(65535).fill(0).map((_, idx) => (idx % 10) + 0x30)
  ]));

  assert.equal(decode(new Uint8Array([
    0xda,0x01,0x00,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36
  ])),
  "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456"
 );

  assert.equal(decode(new Uint8Array([
    0xda, 0xff, 0xff, ...new Array(65535).fill(0).map((_, idx) => (idx % 10) + 0x30)
  ])), new Array(65535).fill(0).map( (_, idx) => (idx % 10).toString()).join(""));
});

test('str32', () => {
  assert.equal(encode(new Array(65536).fill(0).map( (_, idx) => (idx % 10).toString()).join("")), new Uint8Array([
    0xdb, 0x00, 0x01, 0x00, 0x00, ...new Array(65536).fill(0).map((_, idx) => (idx % 10) + 0x30)
  ]));

  assert.equal(decode(new Uint8Array([
    0xdb, 0x00, 0x01, 0x00, 0x00, ...new Array(65536).fill(0).map((_, idx) => (idx % 10) + 0x30)
  ])), new Array(65536).fill(0).map( (_, idx) => (idx % 10).toString()).join(""));
});

test('bin8', () => {
  assert.equal(encode(new Uint8Array([0xaa])), new Uint8Array([0xc4, 0x01, 0xaa]));
  assert.equal(encode(new Uint8Array(new Array(255).fill(0).map((_, idx) => idx % 256))), new Uint8Array([0xc4, 0xff, ...new Array(255).fill(0).map((_, idx) => idx % 256)]));

  assert.equal(decode(new Uint8Array([0xc4, 0x01, 0xaa])), new Uint8Array([0xaa]));
  assert.equal(decode(new Uint8Array([0xc4, 0xff, ...new Array(255).fill(0).map((_, idx) => idx % 256)])), new Uint8Array(new Array(255).fill(0).map((_, idx) => idx % 256)));
});

test('bin16', () => {  
  assert.equal(encode(new Uint8Array(new Array(256).fill(0).map((_, idx) => idx % 256))), new Uint8Array([0xc5, 0x01, 0x00, ...new Array(256).fill(0).map((_, idx) => idx % 256)]));
  assert.equal(encode(new Uint8Array(new Array(65535).fill(0).map((_, idx) => idx % 256))), new Uint8Array([0xc5, 0xff, 0xff, ...new Array(65535).fill(0).map((_, idx) => idx % 256)]));

  assert.equal(decode(new Uint8Array([0xc5, 0x01, 0x00, ...new Array(256).fill(0).map((_, idx) => idx % 256)])) ,new Uint8Array(new Array(256).fill(0).map((_, idx) => idx % 256)));
  assert.equal(decode(new Uint8Array([0xc5, 0xff, 0xff, ...new Array(65535).fill(0).map((_, idx) => idx % 256)])), new Uint8Array(new Array(65535).fill(0).map((_, idx) => idx % 256)));
});

test('bin32', () => {
  assert.equal(encode(new Uint8Array(new Array(65536).fill(0).map((_, idx) => idx % 256))), new Uint8Array([0xc6, 0x00, 0x01, 0x00, 0x00, ...new Array(65536).fill(0).map((_, idx) => idx % 256)]));
  assert.equal(encode(new Uint8Array(new Array(16777216).fill(0).map((_, idx) => idx % 256))), new Uint8Array([0xc6, 0x01, 0x00, 0x00, 0x00, ...new Array(16777216).fill(0).map((_, idx) => idx % 256)]));

  assert.equal(decode(new Uint8Array([0xc6, 0x00, 0x01, 0x00, 0x00, ...new Array(65536).fill(0).map((_, idx) => idx % 256)])), new Uint8Array(new Array(65536).fill(0).map((_, idx) => idx % 256)));
  assert.equal(decode(new Uint8Array([0xc6, 0x00, 0x01, 0x00, 0x00, ...new Array(65536).fill(0).map((_, idx) => idx % 256)])), new Uint8Array(new Array(65536).fill(0).map((_, idx) => idx % 256)));
});

test.run();
