{"version":3,"file":"index.module.js","sources":["../src/encoder.ts","../src/decoder.ts"],"sourcesContent":["import { encode as encodeToBase58 } from '@urlpack/base58';\nimport { makeMessagePackEncoder } from '@urlpack/msgpack';\n\ntype EncoderOptions<Data> = {\n  encodeData?: (data: Data) => Uint8Array,\n  encodeBinary?: (binary: Uint8Array) => string,\n};\n\nexport function makeEncoder<Data>(options: EncoderOptions<Data> = {}): {\n  encode: (data: Data) => string,\n} {\n  const encodeData = options.encodeData || makeMessagePackEncoder().encode;\n  const encodeBinary = options.encodeBinary || encodeToBase58;\n  return {\n    encode: data => encodeBinary(encodeData(data as any)),\n  };\n}\n","import { decode as decodeBase58 } from '@urlpack/base58';\nimport { makeMessagePackDecoder } from '@urlpack/msgpack';\n\ntype DecoderOptions<Data> = {\n  decodeString?: (str: string) => Uint8Array,\n  decodeBinary?: (binary: Uint8Array) => Data,\n};\n\nexport function makeDecoder<Data>(options: DecoderOptions<Data> = {}): {\n  decode: (str: string) => Data,\n} {\n  const decodeString = decodeBase58;\n  const decodeBinary = options.decodeBinary || makeMessagePackDecoder().decode;\n  return {\n    decode: str => decodeBinary(decodeString(str)) as Data,\n  };\n}\n"],"names":["makeEncoder","options","encodeData","makeMessagePackEncoder","encode","encodeBinary","encodeToBase58","data","makeDecoder","decodeString","decodeBase58","decodeBinary","makeMessagePackDecoder","decode","str"],"mappings":"oJAQgBA,EAAkBC,YAAAA,IAAAA,EAAgC,IAGhE,IAAMC,EAAaD,EAAQC,YAAcC,IAAyBC,OAC5DC,EAAeJ,EAAQI,cAAgBC,EAC7C,MAAO,CACLF,OAAQ,SAAAG,UAAQF,EAAaH,EAAWK,eCN5BC,EAAkBP,YAAAA,IAAAA,EAAgC,IAGhE,IAAMQ,EAAeC,EACfC,EAAeV,EAAQU,cAAgBC,IAAyBC,OACtE,MAAO,CACLA,OAAQ,SAAAC,UAAOH,EAAaF,EAAaK"}